generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["tracing"]
}

datasource db {
  provider = "postgresql"
  url      = "postgresql://postgres:Andres_98@localhost:5432/proyecto_tronco?schema=public"
}

model accesos_usuario {
  id_acceso          Int           @id(map: "accesos_usuario_pk") @default(autoincrement())
  id_rol_usuario     Int
  id_ruta_app        Int
  descripcion_acceso String?       @db.VarChar(255)
  id_usuario_edita   Int?
  acceso_creado_en   DateTime?     @db.Date
  acceso_editado_en  DateTime?     @db.Date
  id_usuario_crea    Int?
  roles_usuario      roles_usuario @relation(fields: [id_rol_usuario], references: [id_rol_usuario], onDelete: NoAction, onUpdate: NoAction, map: "roles_usuario_accesos_usuario_fk")
  rutas_app          rutas_app     @relation(fields: [id_ruta_app], references: [id_ruta_app], onDelete: NoAction, onUpdate: NoAction, map: "rutas_app_accesos_usuario_fk")
}

model agendamiento_clase {
  id_agendamiento    Int              @id(map: "agendamiento_clase_pk") @default(autoincrement())
  id_profesor        Int
  id_precio_clase    Int
  id_mesa            Int
  fecha_agendamiento DateTime?        @db.Date
  horario_inicio     DateTime         @db.Timestamp(6)
  horario_hasta      DateTime         @db.Timestamp(6)
  creadoen           DateTime         @db.Timestamp(6)
  editadoen          DateTime?        @db.Timestamp(6)
  clase_abonada      Boolean?
  monto_abonado      Int?
  mesas              mesas            @relation(fields: [id_mesa], references: [id_mesa], onDelete: NoAction, onUpdate: NoAction, map: "mesas_agendamiento_clase_fk")
  precio_clase       precio_clase     @relation(fields: [id_precio_clase], references: [id_precio_clase], onDelete: NoAction, onUpdate: NoAction, map: "precio_clase_agendamiento_clase_fk")
  profesores         profesores       @relation(fields: [id_profesor], references: [id_profesor], onDelete: NoAction, onUpdate: NoAction, map: "profesores_agendamiento_clase_fk")
  clases_alumnos     clases_alumnos[]
  ventas             ventas[]
}

model cuotas_socio {
  id_cuota_socio       Int                @id(map: "cuotas_socio_pk") @default(autoincrement())
  id_cliente           Int
  id_vencimiento       Int
  id_precio_cuota      Int?
  fecha_vencimiento    DateTime           @db.Date
  descripcion          String             @db.VarChar(255)
  descuento            Float?             @db.Real
  pago_realizado       Boolean?           @default(false)
  fecha_pago_realizado DateTime?          @db.Date
  monto_cuota          Int
  estado               String             @db.VarChar(50)
  precio_cuota         precio_cuota?      @relation(fields: [id_precio_cuota], references: [id_precio_cuota], onDelete: NoAction, onUpdate: NoAction, map: "precio_cuota_cuotas_socio_fk")
  cliente              cliente            @relation(fields: [id_cliente], references: [id_cliente], onDelete: NoAction, onUpdate: NoAction, map: "socio_cuotas_socio_fk")
  vencimiento_cuotas   vencimiento_cuotas @relation(fields: [id_vencimiento], references: [id_vencimiento], onDelete: NoAction, onUpdate: NoAction, map: "vencimiento_cuotas_cuotas_socio_fk")
  ventas               ventas[]
}

model eventos {
  id_evento            Int             @id(map: "eventos_pk") @default(autoincrement())
  id_tipo_evento       Int
  cierre_inscripciones DateTime?       @db.Timestamp(6)
  fecha_desde_evento   DateTime        @unique(map: "eventos_idx1") @db.Timestamp(6)
  eventocreadoen       DateTime?       @db.Date
  eventoeditadoen      DateTime?       @db.Date
  fecha_hasta_evento   DateTime        @unique(map: "eventos_idx2") @db.Timestamp(6)
  estadoevento         String?         @db.VarChar(20)
  decripcion_evento    String?         @db.VarChar(255)
  nombre_evento        String?         @db.VarChar(255)
  todo_el_dia          Boolean
  fechaagendamiento    DateTime?       @db.Date
  es_en_club           Boolean         @default(true)
  categorias           categorias[]
  tipos_evento         tipos_evento    @relation(fields: [id_tipo_evento], references: [id_tipo_evento], onDelete: NoAction, onUpdate: NoAction, map: "tipos_evento_eventos_fk")
  inscripciones        inscripciones[]
  insumos              insumos[]

  @@index([fecha_desde_evento], map: "eventos_idx")
}

model inscripciones {
  id_inscripcion       Int        @id(map: "inscripciones_pk") @default(autoincrement())
  id_cliente           Int
  id_categoria         Int
  id_evento            Int
  desc_inscripcion     String?    @db.VarChar(255)
  fecha_inscripcion    DateTime   @db.Date
  estado               String     @db.VarChar(50)
  inscripcioncreadoen  DateTime?  @db.Date
  inscripcioneditadoen DateTime?  @db.Date
  costo_inscripcion    Int?
  categorias           categorias @relation(fields: [id_categoria], references: [id_categoria], onDelete: NoAction, onUpdate: NoAction, map: "categorias_inscripciones_fk")
  eventos              eventos    @relation(fields: [id_evento], references: [id_evento], onDelete: NoAction, onUpdate: NoAction, map: "eventos_inscripciones_fk")
  cliente              cliente    @relation(fields: [id_cliente], references: [id_cliente], onDelete: NoAction, onUpdate: NoAction, map: "socio_inscripciones_fk")
  ventas               ventas[]
}

model mesas {
  id_mesa            Int                  @id(map: "mesas_pk") @default(autoincrement())
  desc_mesa          String               @db.VarChar(255)
  agendamiento_clase agendamiento_clase[]
  reservas           reservas[]
}

model reservas {
  id_cliente_reserva Int              @id(map: "reservas_pk") @default(autoincrement())
  id_cliente         Int
  id_mesa            Int?
  id_precio_reserva  Int?
  monto              Int
  fecha_reserva      DateTime?        @db.Timestamp(6)
  reserva_editada    DateTime?        @db.Timestamp(6)
  creado_por         Int
  creado_en          DateTime         @db.Timestamp(6)
  editado_por        Int?
  editado_en         DateTime?        @db.Timestamp(6)
  fecha_creacion     DateTime         @db.Date
  hora_desde         DateTime         @db.Timestamp(6)
  hora_hasta         DateTime?        @db.Timestamp(6)
  estado             String           @db.VarChar(50)
  tipo_ingreso       String?          @db.VarChar(255)
  mesas              mesas?           @relation(fields: [id_mesa], references: [id_mesa], onDelete: NoAction, onUpdate: NoAction, map: "mesas_reservas_fk")
  precio_reservas    precio_reservas? @relation(fields: [id_precio_reserva], references: [id_precio_reserva], onDelete: NoAction, onUpdate: NoAction, map: "precio_reservas_reservas_fk")
  cliente            cliente          @relation(fields: [id_cliente], references: [id_cliente], onDelete: NoAction, onUpdate: NoAction, map: "socio_socio_reservas_fk")
  ventas             ventas[]
}

model roles_usuario {
  id_rol_usuario       Int               @id(map: "roles_usuario_pk") @default(autoincrement())
  descripcion_rol      String            @db.VarChar(255)
  estado_rol_usuario   String            @db.VarChar(50)
  rol__creado_en       DateTime          @db.Timestamp(6)
  rol_editado_en       DateTime?         @db.Timestamp(6)
  id_usuario_crea_rol  Int?
  id_usuario_edita_rol Int?
  accesos_usuario      accesos_usuario[]
  cliente              cliente[]
}

model tipo_socio {
  id_tipo_socio         Int            @id(map: "tipo_socio_pk") @default(autoincrement())
  desc_tipo_socio       String         @db.VarChar
  estado_tipo_socio     Int?           @db.SmallInt
  tipo_socio_creado_en  DateTime       @db.Date
  tipo_socio_editado_en DateTime?      @db.Date
  cliente               cliente[]
  precio_cuota          precio_cuota[]
}

model profesores {
  id_profesor          Int                    @id(map: "profesores_pk") @default(autoincrement())
  creadoen             DateTime               @db.Date
  editadoen            DateTime?              @db.Date
  estado_profesor      String?                @db.VarChar(50)
  nombre_profesor      String                 @db.VarChar(50)
  costo_x_hora         Int?
  contacto_profesor    String?                @db.VarChar
  cedula               String                 @db.VarChar(30)
  profesor_borrado     Boolean?
  porc_facturacion     Float?                 @db.Real
  agendamiento_clase   agendamiento_clase[]
  periodos_facturacion periodos_facturacion[]
  precio_clase         precio_clase[]
}

model rutas_app {
  id_ruta_app     Int               @id(map: "rutas_app_pk") @default(autoincrement())
  accion          String?           @db.VarChar(255)
  path_ruta       String            @db.VarChar(255)
  accesos_usuario accesos_usuario[]
}

model egresos {
  is_operacion_egreso Int             @id(map: "egresos_pk") @default(autoincrement())
  id_tipo_egreso      Int
  nro_factura         String          @db.VarChar(255)
  cargado_en          DateTime        @db.Date
  editado_en          DateTime?       @db.Date
  descripcion         String          @db.VarChar
  monto               Int
  borrado             Boolean?
  comprobante         String          @db.VarChar
  fecha_pago          DateTime        @db.Date
  fecha_egreso        DateTime        @db.Date
  id_movimiento_caja  Int
  movimiento_caja     movimiento_caja @relation(fields: [id_movimiento_caja], references: [id_movimiento_caja], onDelete: NoAction, onUpdate: NoAction, map: "movimiento_caja_egresos_fk")
  tipos_egreso        tipos_egreso    @relation(fields: [id_tipo_egreso], references: [id_tipo_egreso], onDelete: NoAction, onUpdate: NoAction, map: "tipos_egreso_egresos_fk")
}

model ingresos {
  column_d_operacion_ingreso Int             @id(map: "ingresos_pk") @default(autoincrement())
  id_tipo_ingreso            Int
  id_movimiento_caja         Int
  nro_factura                String?         @db.VarChar(255)
  cargado_en                 DateTime        @db.Date
  editado_en                 DateTime?       @db.Date
  descripcion                String?         @db.VarChar
  monto                      Int
  borrado                    Boolean         @default(false)
  fecha_ingreso              DateTime        @db.Date
  movimiento_caja            movimiento_caja @relation(fields: [id_movimiento_caja], references: [id_movimiento_caja], onDelete: NoAction, onUpdate: NoAction, map: "movimiento_caja_ingresos_fk")
  tipos_ingreso              tipos_ingreso   @relation(fields: [id_tipo_ingreso], references: [id_tipo_ingreso], onDelete: NoAction, onUpdate: NoAction, map: "tipos_ingreso_ingresos_fk")
}

model tipos_egreso {
  id_tipo_egreso  Int               @id(map: "tipos_egreso_pk") @default(autoincrement())
  descripcion     String            @db.VarChar
  creado_en       DateTime          @db.Timestamp(6)
  editado_en      DateTime?         @db.Timestamp(6)
  creado_por      Int
  editado_por     Int?
  gasto_fijo      Boolean?
  compras         compras[]
  egresos         egresos[]
  gastos_fijos    gastos_fijos[]
  movimiento_caja movimiento_caja[]
}

model tipos_ingreso {
  id_tipo_ingreso Int               @id(map: "tipos_ingreso_pk") @default(autoincrement())
  creado_en       DateTime          @db.Timestamp(6)
  editado_en      DateTime?         @db.Timestamp(6)
  creado_por      Int
  editado_por     Int?
  descripcion     String            @db.VarChar
  ingresos        ingresos[]
  movimiento_caja movimiento_caja[]
  ventas          ventas[]
}

model categorias {
  id_categoria         Int               @id(map: "categorias_pk") @default(autoincrement())
  id_evento            Int
  id_costo_categoria   Int?
  costo                Int
  nombre_categoria     String            @db.VarChar(255)
  cierre_inscripciones DateTime?         @db.Timestamp(6)
  descripcion          String            @db.VarChar(255)
  edad_minima          Int?
  edad_maxima          Int?
  nivel_minimo         Int?
  nivel_maximo         Int?
  sexo                 String?           @db.VarChar(10)
  costo_categorias     costo_categorias? @relation(fields: [id_costo_categoria], references: [id_costo_categoria], onDelete: NoAction, onUpdate: NoAction, map: "costo_categorias_categorias_fk")
  eventos              eventos           @relation(fields: [id_evento], references: [id_evento], onDelete: NoAction, onUpdate: NoAction, map: "eventos_categorias_fk")
  inscripciones        inscripciones[]
  reglas_evento        reglas_evento[]
}

model caja_chica {
  id_caja_chica           Int                       @id(map: "caja_chica_pk") @default(autoincrement())
  id_cliente              Int
  monto_inicial           Int
  monto_actual            Float?                    @default(0) @db.Real
  fecha_creacion          DateTime                  @default(now()) @db.Timestamp(6)
  estado                  Boolean                   @default(false)
  cliente                 cliente                   @relation(fields: [id_cliente], references: [id_cliente], onDelete: NoAction, onUpdate: NoAction, map: "socio_caja_chica_fk")
  gastos_caja_chica       gastos_caja_chica[]
  reposiciones_caja_chica reposiciones_caja_chica[]
}

model gastos_caja_chica {
  id_gasto_caja_chica    Int        @id(map: "gastos_caja_chica_pk") @default(autoincrement())
  monto                  Int
  id_caja_chica          Int
  descripcion            String?    @db.VarChar(255)
  fecha_gasto_caja_chica DateTime   @db.Timestamp(6)
  nro_factura            String?    @db.VarChar(255)
  comprobante            String?    @db.VarChar(255)
  fecha_edicion          DateTime?  @db.Timestamp(6)
  caja_chica             caja_chica @relation(fields: [id_caja_chica], references: [id_caja_chica], onDelete: NoAction, onUpdate: NoAction, map: "caja_chica_gastos_caja_chica_fk")
}

model reposiciones_caja_chica {
  id_reposicion_caja_chica Int        @id(map: "reposiciones_caja_chica_pk") @default(autoincrement())
  id_caja_chica            Int
  monto_reposicion         Int
  fecha_reposicion         DateTime?  @db.Timestamp(6)
  caja_chica               caja_chica @relation(fields: [id_caja_chica], references: [id_caja_chica], onDelete: NoAction, onUpdate: NoAction, map: "caja_chica_reposiciones_caja_chica_fk")
}

model cliente {
  id_cliente         Int               @id(map: "cliente_pk") @default(autoincrement())
  id_tipo_socio      Int?
  parent_id_cliente  Int?
  id_rol_usuario     Int?
  password           String?           @db.VarChar(255)
  estado_usuario     String?           @db.VarChar(50)
  apellido           String            @db.VarChar(255)
  nombre             String            @db.VarChar(255)
  cedula             String            @unique(map: "cliente_cedula_index") @db.VarChar(255)
  creadoen           DateTime          @default(now()) @db.Timestamp(6)
  fecha_nacimiento   DateTime?         @db.Date
  nombre_cmp         String?           @default("") @db.VarChar(255)
  correo_electronico String?           @default("") @db.VarChar(255)
  numero_telefono    String?           @db.VarChar(255)
  direccion          String?           @default("") @db.VarChar(255)
  ruc                String?           @default("") @db.VarChar(255)
  editadoen          DateTime?         @db.Timestamp(6)
  es_socio           Boolean?          @default(true)
  eliminadoen        DateTime?         @db.Timestamp(6)
  nombre_usuario     String?           @db.VarChar(50)
  sexo               String?           @db.VarChar(10)
  nivel              Int?
  caja               caja[]
  caja_chica         caja_chica[]
  clases_alumnos     clases_alumnos[]
  cliente            cliente?          @relation("clienteTocliente", fields: [parent_id_cliente], references: [id_cliente], onDelete: NoAction, onUpdate: NoAction, map: "cliente_cliente_fk")
  other_cliente      cliente[]         @relation("clienteTocliente")
  roles_usuario      roles_usuario?    @relation(fields: [id_rol_usuario], references: [id_rol_usuario], onDelete: NoAction, onUpdate: NoAction, map: "roles_usuario_socio_fk")
  tipo_socio         tipo_socio?       @relation(fields: [id_tipo_socio], references: [id_tipo_socio], onDelete: NoAction, onUpdate: NoAction, map: "tipo_socio_socio_fk")
  compras            compras[]
  cuotas_socio       cuotas_socio[]
  inscripciones      inscripciones[]
  movimiento_caja    movimiento_caja[]
  reservas           reservas[]
  ventas             ventas[]
}

model caja {
  id_caja             Int               @id(map: "caja_pk") @default(autoincrement())
  id_cliente          Int
  fecha_apertura      DateTime          @unique(map: "caja_idx") @db.Timestamp(6)
  monto_inicial       Int
  cliente_actualiza   Int?
  fecha_actualizacion DateTime?         @db.Timestamp(6)
  fecha_cierre        DateTime?         @unique(map: "caja_idx1") @db.Timestamp(6)
  monto_cierre        Int
  id_cliente_cierre   Int?
  id_cliente_apertura Int
  cliente             cliente           @relation(fields: [id_cliente], references: [id_cliente], onDelete: NoAction, onUpdate: NoAction, map: "cliente_caja_fk")
  movimiento_caja     movimiento_caja[]
}

model compras {
  id_compra       Int               @id(map: "compras_pk") @default(autoincrement())
  id_cliente      Int
  id_insumo       Int?
  id_gasto_fijo   Int?
  descripcion     String            @db.VarChar(200)
  estado          String            @db.VarChar(50)
  creado_en       DateTime          @db.Timestamp(6)
  creado_por      Int
  editado_en      DateTime?         @db.Timestamp(6)
  editado_por     Int?
  fecha_operacion DateTime?         @db.Timestamp(6)
  monto           Int
  cedula          String?           @db.VarChar(255)
  proveedor       String?           @db.VarChar(120)
  id_tipo_egreso  Int?
  cantidad        Int               @default(1)
  cliente         cliente           @relation(fields: [id_cliente], references: [id_cliente], onDelete: NoAction, onUpdate: NoAction, map: "cliente_compras_fk")
  gastos_fijos    gastos_fijos?     @relation(fields: [id_gasto_fijo], references: [id_gasto_fijo], onDelete: NoAction, onUpdate: NoAction, map: "gastos_fijos_compras_fk")
  insumos         insumos?          @relation(fields: [id_insumo], references: [id_insumo], onDelete: NoAction, onUpdate: NoAction, map: "insumos_compras_fk")
  tipos_egreso    tipos_egreso?     @relation(fields: [id_tipo_egreso], references: [id_tipo_egreso], onDelete: NoAction, onUpdate: NoAction, map: "tipos_egreso_compras_fk")
  movimiento_caja movimiento_caja[]
}

model movimiento_caja {
  id_movimiento_caja Int            @id(map: "movimiento_caja_pk") @default(autoincrement())
  id_caja            Int
  id_tipo_pago       Int
  id_venta           Int?
  id_compra          Int?
  id_factura         Int?
  id_tipo_ingreso    Int?
  id_cliente         Int
  id_tipo_egreso     Int?
  descripcion        String         @db.VarChar(255)
  cedula             String         @db.VarChar(255)
  nro_comprobante    String?        @db.VarChar(255)
  nro_factura        String?        @db.VarChar(255)
  fecha_operacion    DateTime?      @db.Timestamp(6)
  creado_en          DateTime       @default(now()) @db.Timestamp(6)
  editado_en         DateTime?      @db.Timestamp(6)
  editado_por        Int?
  creado_por         Int
  timbrado           Int?
  egresos            egresos[]
  ingresos           ingresos[]
  caja               caja           @relation(fields: [id_caja], references: [id_caja], onDelete: NoAction, onUpdate: NoAction, map: "caja_movimiento_caja_fk")
  cliente            cliente        @relation(fields: [id_cliente], references: [id_cliente], onDelete: NoAction, onUpdate: NoAction, map: "cliente_movimiento_caja_fk")
  compras            compras?       @relation(fields: [id_compra], references: [id_compra], onDelete: NoAction, onUpdate: NoAction, map: "compras_movimiento_caja_fk")
  facturas           facturas?      @relation(fields: [id_factura], references: [id_factura], onDelete: NoAction, onUpdate: NoAction, map: "facturas_movimiento_caja_fk")
  tipo_pago          tipo_pago      @relation(fields: [id_tipo_pago], references: [id_tipo_pago], onDelete: NoAction, onUpdate: NoAction, map: "tipo_pago_movimiento_caja_fk")
  tipos_egreso       tipos_egreso?  @relation(fields: [id_tipo_egreso], references: [id_tipo_egreso], onDelete: NoAction, onUpdate: NoAction, map: "tipos_egreso_movimiento_caja_fk")
  tipos_ingreso      tipos_ingreso? @relation(fields: [id_tipo_ingreso], references: [id_tipo_ingreso], onDelete: NoAction, onUpdate: NoAction, map: "tipos_ingreso_movimiento_caja_fk")
  ventas             ventas?        @relation(fields: [id_venta], references: [id_venta], onDelete: NoAction, onUpdate: NoAction, map: "ventas_movimiento_caja_fk")
}

model ventas {
  id_venta             Int                   @id(map: "ventas_pk") @default(autoincrement())
  id_cliente           Int
  id_cuota_socio       Int?
  id_cliente_reserva   Int?
  id_agendamiento      Int?
  id_periodo_fact      Int?
  id_tipo_ingreso      Int?
  id_inscripcion       Int?
  estado               String                @db.VarChar(50)
  monto                Int
  fecha_operacion      DateTime?             @db.Timestamp(6)
  creado_en            DateTime              @db.Timestamp(6)
  descripcion_venta    String                @db.VarChar(255)
  creado_por           Int
  editado_por          Int?
  editado_en           DateTime?             @db.Timestamp(6)
  cedula               String?               @db.VarChar(255)
  movimiento_caja      movimiento_caja[]
  agendamiento_clase   agendamiento_clase?   @relation(fields: [id_agendamiento], references: [id_agendamiento], onDelete: NoAction, onUpdate: NoAction, map: "agendamiento_clase_ventas_fk")
  cliente              cliente               @relation(fields: [id_cliente], references: [id_cliente], onDelete: NoAction, onUpdate: NoAction, map: "cliente_ventas_fk")
  cuotas_socio         cuotas_socio?         @relation(fields: [id_cuota_socio], references: [id_cuota_socio], onDelete: NoAction, onUpdate: NoAction, map: "cuotas_socio_ventas_fk")
  inscripciones        inscripciones?        @relation(fields: [id_inscripcion], references: [id_inscripcion], onDelete: NoAction, onUpdate: NoAction, map: "inscripciones_ventas_fk")
  periodos_facturacion periodos_facturacion? @relation(fields: [id_periodo_fact], references: [id_periodo_fact], onDelete: NoAction, onUpdate: NoAction, map: "periodos_facturacion_ventas_fk")
  reservas             reservas?             @relation(fields: [id_cliente_reserva], references: [id_cliente_reserva], onDelete: NoAction, onUpdate: NoAction, map: "reservas_ventas_fk")
  tipos_ingreso        tipos_ingreso?        @relation(fields: [id_tipo_ingreso], references: [id_tipo_ingreso], onDelete: NoAction, onUpdate: NoAction, map: "tipos_ingreso_ventas_fk")

  @@index([cedula], map: "ventas_cedula_cliente_index")
}

model precio_cuota {
  id_precio_cuota     Int            @id(map: "precio_cuota_pk") @default(autoincrement())
  id_tipo_socio       Int
  monto_cuota         Int
  desc_tipo_descuento String?        @default("DESCUENTO APLICADO") @db.VarChar
  desc_precio_cuota   String?        @db.VarChar(255)
  fecha_precio        DateTime?      @db.Timestamp(6)
  porc_descuento      Float?         @db.Real
  valido              Boolean        @default(true)
  creado_en           DateTime?      @default(now()) @db.Timestamp(6)
  cuotas_socio        cuotas_socio[]
  tipo_socio          tipo_socio     @relation(fields: [id_tipo_socio], references: [id_tipo_socio], onDelete: NoAction, onUpdate: NoAction, map: "tipo_socio_precio_cuota_fk")
}

model vencimiento_cuotas {
  id_vencimiento  Int            @id(map: "vencimiento_cuotas_pk") @default(autoincrement())
  dia_vencimiento Int
  creado_en       DateTime       @db.Timestamp(6)
  editado_en      DateTime?      @db.Timestamp(6)
  valido          Boolean        @default(true)
  cuotas_socio    cuotas_socio[]
}

model precio_reservas {
  id_precio_reserva   Int        @id(map: "id_precio_reserva") @default(autoincrement())
  monto_reserva       Int
  desc_tipo_descuento String?    @default("DESCUENTO APLICADO") @db.VarChar
  porc_descuento      Float?     @db.Real
  valido              Boolean    @default(true)
  creado_en           DateTime?  @default(now()) @db.Timestamp(6)
  fecha_precio        DateTime?  @db.Timestamp(6)
  reservas            reservas[]
}

model tipo_pago {
  id_tipo_pago    Int               @id(map: "tipo_pago_pk") @default(autoincrement())
  dec_tipo_pago   String            @db.VarChar(255)
  movimiento_caja movimiento_caja[]
}

model insumos {
  id_insumo   Int       @id(map: "insumos_pk") @default(autoincrement())
  id_evento   Int
  cantidad    Int       @default(1)
  editado_por Int?
  descripcion String    @db.VarChar(200)
  creado_en   DateTime  @db.Timestamp(6)
  creado_por  Int
  costo       Int
  editado_en  DateTime? @db.Timestamp(6)
  compras     compras[]
  eventos     eventos   @relation(fields: [id_evento], references: [id_evento], onDelete: NoAction, onUpdate: NoAction, map: "eventos_insumos_fk")
}

model reglas {
  id_regla          Int             @id(map: "reglas_pk") @default(autoincrement())
  descripcion_regla String          @db.VarChar(200)
  tipo_regla        String          @db.VarChar(200)
  valor_regla       String          @db.VarChar
  reglas_evento     reglas_evento[]
}

model reglas_evento {
  id_regla_evento Int        @id(map: "reglas_evento_pk") @default(autoincrement())
  id_regla        Int
  id_categoria    Int
  cumple_regla    Boolean    @default(false)
  categorias      categorias @relation(fields: [id_categoria], references: [id_categoria], onDelete: NoAction, onUpdate: NoAction, map: "categorias_reglas_evento_fk")
  reglas          reglas     @relation(fields: [id_regla], references: [id_regla], onDelete: NoAction, onUpdate: NoAction, map: "reglas_reglas_evento_fk")
}

model tipos_evento {
  id_tipo_evento   Int       @id(map: "tipos_evento_pk") @default(autoincrement())
  desc_tipo_evento String    @db.VarChar(255)
  color_evento     String?   @db.VarChar(255)
  eventos          eventos[]
}

model costo_categorias {
  id_costo_categoria Int          @id(map: "costo_categorias_pk") @default(autoincrement())
  costo_categoria    Int
  valido             Boolean      @default(true)
  fecha_precio       DateTime?    @db.Timestamp(6)
  porc_descuento     Float?       @db.Real
  creado_en          DateTime?    @db.Timestamp(6)
  categorias         categorias[]
}

model precio_clase {
  id_precio_clase    Int                  @id(map: "precio_clase_pk") @default(autoincrement())
  id_profesor        Int
  porc_descuento     Float?               @db.Real
  creado_en          DateTime?            @default(now()) @db.Timestamp(6)
  valido             Boolean              @default(true)
  fecha_precio       DateTime?            @db.Timestamp(6)
  precio             Int
  agendamiento_clase agendamiento_clase[]
  profesores         profesores           @relation(fields: [id_profesor], references: [id_profesor], onDelete: NoAction, onUpdate: NoAction, map: "profesores_precio_clase_fk")
}

model gastos_fijos {
  id_gasto_fijo          Int          @id(map: "gastos_fijos_pk") @default(autoincrement())
  id_tipo_egreso         Int
  creado_en              DateTime     @db.Timestamp(6)
  editado_en             DateTime?    @db.Timestamp(6)
  creado_por             Int
  editado_por            Int?
  monto                  Int
  descripcion_gasto_fijo String?      @db.VarChar(200)
  fecha_vencimiento      DateTime     @db.Date
  compras                compras[]
  tipos_egreso           tipos_egreso @relation(fields: [id_tipo_egreso], references: [id_tipo_egreso], onDelete: NoAction, onUpdate: NoAction, map: "tipos_egreso_gastos_fijos_fk")
}

model facturas {
  id_factura      Int               @id(map: "facturas_pk") @default(autoincrement())
  nro_timbrado    Int
  nro_factura     String            @db.VarChar(255)
  fecha_emision   DateTime?         @db.Date
  ruc_cliente     String?           @db.VarChar(255)
  total_iva       Int?
  condicion_venta String?           @default("C") @db.VarChar(2)
  monto_total     Int?
  numero          Int
  timbrado        timbrado          @relation(fields: [nro_timbrado], references: [nro_timbrado], onDelete: NoAction, onUpdate: NoAction, map: "timbrado_facturas_fk")
  movimiento_caja movimiento_caja[]
}

model timbrado {
  nro_timbrado        Int        @id(map: "timbrado_pk") @default(autoincrement())
  cod_establecimiento String     @default("001") @db.VarChar(5)
  punto_expedicion    String     @default(dbgenerated("1")) @db.VarChar(5)
  fecha_autorizacion  DateTime?  @db.Date
  fecha_vencimiento   DateTime   @db.Date
  numero_desde        Int
  numero_hasta        Int
  ruc_emisor          String?    @db.VarChar(255)
  razon_social        String?    @db.VarChar(255)
  direccion           String?    @db.VarChar(255)
  facturas            facturas[]
}

model api_logs {
  id_log          Int       @id(map: "api_logs_pk") @default(autoincrement())
  status_code     Int
  request_body    String    @db.VarChar
  response_body   String?   @db.VarChar
  type_request    String    @db.VarChar(10)
  fecha_solicitud DateTime? @db.Timestamp(6)
  ruta_solicitud  String    @db.VarChar(255)
}

model periodos_facturacion {
  id_periodo_fact Int        @id(map: "periodos_facturacion_pk") @default(autoincrement())
  id_profesor     Int
  inicio          DateTime   @db.Timestamp(6)
  fin             DateTime   @db.Timestamp(6)
  editado_por     Int?
  creado_en       DateTime   @db.Timestamp(6)
  creado_por      Int
  editado_en      DateTime?  @db.Timestamp(6)
  monto_total     Int
  profesores      profesores @relation(fields: [id_profesor], references: [id_profesor], onDelete: NoAction, onUpdate: NoAction, map: "profesores_periodos_facturacion_fk")
  ventas          ventas[]
}

model clases_alumnos {
  id_clase_alumno    Int                @id(map: "clases_alumnos_pk") @default(autoincrement())
  id_agendamiento    Int
  id_cliente         Int
  agendamiento_clase agendamiento_clase @relation(fields: [id_agendamiento], references: [id_agendamiento], onDelete: NoAction, onUpdate: NoAction, map: "agendamiento_clase_clases_alumnos_fk")
  cliente            cliente            @relation(fields: [id_cliente], references: [id_cliente], onDelete: NoAction, onUpdate: NoAction, map: "cliente_clases_alumnos_fk")
}
