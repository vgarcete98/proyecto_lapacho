generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model accesos_usuario {
  id_acceso          BigInt        @id(map: "accesos_usuario_pk") @default(autoincrement())
  id_rol_usuario     BigInt
  descripcion_acceso String        @db.VarChar(255)
  rol_editado_en     DateTime?     @db.Date
  rol_creado_en      DateTime?     @db.Date
  id_usuario_edita   Int?
  id_usuario_crea    Int?
  roles_usuario      roles_usuario @relation(fields: [id_rol_usuario], references: [id_rol_usuario], onDelete: NoAction, onUpdate: NoAction, map: "roles_usuario_accesos_usuario_fk")
  socio              socio[]
}

model agendamiento_clase {
  id_agendamiento    BigInt     @id(map: "agendamiento_clase_pk") @default(autoincrement())
  id_socio           BigInt
  id_profesor        Int
  fecha_agendamiento DateTime   @db.Date
  horario_inicio     String     @db.VarChar(10)
  horario_hasta      String     @db.VarChar(10)
  creadoen           DateTime?  @db.Date
  editadoen          DateTime?  @db.Date
  clase_eliminada    Boolean
  clase_abonada      Boolean?
  monto_abonado      Int?
  profesores         profesores @relation(fields: [id_profesor], references: [id_profesor], onDelete: NoAction, onUpdate: NoAction, map: "profesores_agendamiento_clase_fk")
  socio              socio      @relation(fields: [id_socio], references: [id_socio], onDelete: NoAction, onUpdate: NoAction, map: "socio_agendamiento_clase_fk")
}

model calendario_eventos {
  id_evento_calendario    BigInt                    @id(map: "calendario_eventos_pk") @default(autoincrement())
  id_tipo_evento          BigInt
  fecha_desde_evento      DateTime                  @db.Date
  eventocreadoen          DateTime?                 @db.Date
  eventoeditadoen         DateTime?                 @db.Date
  fecha_hasta_evento      DateTime?                 @db.Date
  costo                   Int
  estadoevento            String?                   @db.VarChar(20)
  decripcion_evento       String?                   @db.VarChar(255)
  eventos                 eventos                   @relation(fields: [id_tipo_evento], references: [id_tipo_evento], onDelete: NoAction, onUpdate: NoAction, map: "eventos_calendario_eventos_fk")
  inscripciones           inscripciones[]
  inscripciones_no_socios inscripciones_no_socios[]
}

model clubes_habilitados {
  id_club_habilitado     Int           @id(map: "clubes_habilitados_pk") @default(autoincrement())
  nombre_club_habilitado String        @db.VarChar(255)
  esta_habilitado        Boolean       @default(false)
  editadoen              DateTime?     @db.Date
  creadoen               DateTime?     @db.Date
  pases_socio            pases_socio[]
}

model cuotas_socio {
  id_cuota_socio       BigInt         @id(map: "cuotas_socio_pk") @default(autoincrement())
  id_socio             BigInt
  id_tipo_descuento    BigInt
  fecha_vencimiento    DateTime       @db.Date
  descripcion          String         @db.VarChar(255)
  descuento            Float?         @db.Real
  pago_realizado       Boolean?       @default(false)
  fecha_pago_realizado DateTime?      @db.Date
  monto_cuota          Int
  id_tipo_cuota        Int
  socio                socio          @relation(fields: [id_socio], references: [id_socio], onDelete: NoAction, onUpdate: NoAction, map: "socio_cuotas_socio_fk")
  tipo_cuota           tipo_cuota     @relation(fields: [id_tipo_cuota], references: [id_tipo_cuota], onDelete: NoAction, onUpdate: NoAction, map: "tipo_cuota_cuotas_socio_fk")
  tipo_descuento       tipo_descuento @relation(fields: [id_tipo_descuento], references: [id_tipo_descuento], onDelete: NoAction, onUpdate: NoAction, map: "tipo_descuento_cuotas_socio_fk")
  pagos_socio          pagos_socio[]
}

model eventos {
  id_tipo_evento     BigInt               @id(map: "eventos_pk") @default(autoincrement())
  desc_tipo_evento   String               @db.VarChar(255)
  calendario_eventos calendario_eventos[]
}

model gastos_club {
  id_pago_club      BigInt     @id(map: "gastos_club_pk") @default(autoincrement())
  id_tipo_pago      BigInt
  nro_factura       String     @db.VarChar(255)
  gastocreadoen     DateTime?  @db.Date
  gastoeditadoen    DateTime?  @db.Date
  descripcion       String     @db.VarChar(255)
  monto_gasto       Int
  ingreso           Boolean?   @default(false)
  egreso            Boolean?   @default(false)
  gasto_borrado     Boolean?
  comprobante_gasto String?    @db.VarChar(255)
  tipo_pagos        tipo_pagos @relation(fields: [id_tipo_pago], references: [id_tipo_pago], onDelete: NoAction, onUpdate: NoAction, map: "tipo_pagos_pagos_club_fk")
}

model inscripciones {
  id_inscripcion       BigInt             @id(map: "inscripciones_pk")
  id_socio             BigInt
  id_evento_calendario BigInt
  desc_inscripcion     String?            @db.VarChar(255)
  fecha_inscripcion    DateTime           @db.Date
  abonado              Boolean
  inscripcioncreadoen  DateTime?          @db.Date
  estadoinscripcion    Int?               @db.SmallInt
  inscripcioneditadoen DateTime?          @db.Date
  calendario_eventos   calendario_eventos @relation(fields: [id_evento_calendario], references: [id_evento_calendario], onDelete: NoAction, onUpdate: NoAction, map: "calendario_eventos_inscripciones_fk")
  socio                socio              @relation(fields: [id_socio], references: [id_socio], onDelete: NoAction, onUpdate: NoAction, map: "socio_inscripciones_fk")
}

model mesas {
  id_mesa   BigInt     @id(map: "mesas_pk") @default(autoincrement())
  desc_mesa String     @db.VarChar(255)
  reservas  reservas[]
}

model pagos_socio {
  id_pago_socio    BigInt       @id(map: "pagos_socio_pk") @default(autoincrement())
  id_cuota_socio   BigInt
  nro_factura      String       @db.VarChar(255)
  monto_abonado    Int
  fecha_pago       DateTime?    @db.Date
  comprobante_pago String?      @db.VarChar(255)
  cuotas_socio     cuotas_socio @relation(fields: [id_cuota_socio], references: [id_cuota_socio], onDelete: NoAction, onUpdate: NoAction, map: "cuotas_socio_pagos_socio_fk")
}

model pases_socio {
  id_pase              BigInt             @id(map: "pases_socio_pk") @default(autoincrement())
  id_club_habilitado   Int
  id_socio             BigInt
  descripcion_traspaso String             @db.VarChar(255)
  monto_pase           Int
  doc_adjunto          Boolean            @default(false)
  abonado              Boolean            @default(false)
  estado_pase_socio    Int?               @db.SmallInt
  clubes_habilitados   clubes_habilitados @relation(fields: [id_club_habilitado], references: [id_club_habilitado], onDelete: NoAction, onUpdate: NoAction, map: "clubes_habilitados_pases_socio_fk")
  socio                socio              @relation(fields: [id_socio], references: [id_socio], onDelete: NoAction, onUpdate: NoAction, map: "socio_pases_socio_fk")
}

model persona {
  id_persona       BigInt   @id(map: "persona_pk") @default(autoincrement())
  apellido         String   @db.VarChar(255)
  nombre           String   @db.VarChar(255)
  cedula           String   @db.VarChar(255)
  fecha_nacimiento DateTime @db.Date
  socio            socio[]
}

model reservas {
  id_reserva            BigInt           @id(map: "reservas_pk")
  id_tipo_reserva       BigInt
  id_mesa               BigInt
  horario_reserva_desde String?          @db.VarChar(20)
  horario_reserva_hasta String?          @db.VarChar(20)
  fecha_para_reserva    DateTime?        @db.Date
  mesas                 mesas            @relation(fields: [id_mesa], references: [id_mesa], onDelete: NoAction, onUpdate: NoAction, map: "mesas_reservas_fk")
  tipo_reserva          tipo_reserva     @relation(fields: [id_tipo_reserva], references: [id_tipo_reserva], onDelete: NoAction, onUpdate: NoAction, map: "tipo_reserva_reservas_fk")
  socio_reservas        socio_reservas[]
}

model roles_usuario {
  id_rol_usuario        BigInt                  @id(map: "roles_usuario_pk") @default(autoincrement())
  descripcion_rol       String                  @db.VarChar(255)
  estado_rol_usuario    Int?                    @db.SmallInt
  rol__creado_en        DateTime?               @db.Date
  rol_editado_en        DateTime?               @db.Date
  id_usuario_crea_rol   DateTime?               @db.Date
  id_usuario_edita_rol  Int?
  accesos_usuario       accesos_usuario[]
  rutas_habilitadas_rol rutas_habilitadas_rol[]
}

model socio {
  id_socio             BigInt                 @id(map: "socio_pk") @default(autoincrement())
  id_tipo_socio        BigInt
  id_persona           BigInt
  id_acceso_socio      BigInt
  tipo_usuario         String?                @default(dbgenerated("1")) @db.VarChar(255)
  nombre_usuario       String                 @db.VarChar(255)
  contrasea            String                 @db.VarChar(255)
  estado_usuario       Int?                   @default(1) @db.SmallInt
  nombre_cmp           String?                @default("") @db.VarChar(255)
  correo_electronico   String?                @default("") @db.VarChar(255)
  numero_telefono      String?                @db.VarChar(255)
  direccion            String?                @default("") @db.VarChar(255)
  ruc                  String?                @default("") @db.VarChar(255)
  estado_socio         Int?                   @default(1) @db.SmallInt
  creadoen             DateTime?              @db.Date
  editadoen            DateTime?              @db.Date
  agendamiento_clase   agendamiento_clase[]
  cuotas_socio         cuotas_socio[]
  egresos              egresos[]
  ingresos             ingresos[]
  inscripciones        inscripciones[]
  pases_socio          pases_socio[]
  refinanciacion_socio refinanciacion_socio[]
  accesos_usuario      accesos_usuario        @relation(fields: [id_acceso_socio], references: [id_acceso], onDelete: NoAction, onUpdate: NoAction, map: "accesos_usuario_socio_fk")
  persona              persona                @relation(fields: [id_persona], references: [id_persona], onDelete: NoAction, onUpdate: NoAction, map: "persona_socio_fk")
  tipo_socio           tipo_socio             @relation(fields: [id_tipo_socio], references: [id_tipo_socio], onDelete: NoAction, onUpdate: NoAction, map: "tipo_socio_socio_fk")
  socio_reservas       socio_reservas[]
}

model socio_reservas {
  id_socio_reserva  BigInt    @id(map: "socio_reservas_pk") @default(autoincrement())
  id_socio          BigInt
  id_reserva_socio  BigInt
  reserva_eliminada Boolean?
  fecha_reserva     DateTime? @db.Date
  reserva_editada   DateTime? @db.Date
  reservas          reservas  @relation(fields: [id_reserva_socio], references: [id_reserva], onDelete: NoAction, onUpdate: NoAction, map: "reservas_socio_reservas_fk")
  socio             socio     @relation(fields: [id_socio], references: [id_socio], onDelete: NoAction, onUpdate: NoAction, map: "socio_socio_reservas_fk")
}

model tipo_cuota {
  id_tipo_cuota   Int            @id(map: "tipo_cuota_pk") @default(autoincrement())
  monto_cuota     Int
  creadoen        DateTime       @db.Date
  editadoen       DateTime?      @db.Date
  desc_tipo_cuota String         @db.VarChar(255)
  borrado         Boolean?
  cuotas_socio    cuotas_socio[]
}

model tipo_descuento {
  id_tipo_descuento   BigInt         @id(map: "tipo_descuento_pk") @default(autoincrement())
  desc_tipo_descuento String         @db.VarChar
  cuotas_socio        cuotas_socio[]
}

model tipo_pagos {
  id_tipo_pago   BigInt        @id(map: "tipo_pagos_pk") @default(autoincrement())
  desc_tipo_pago String        @db.VarChar(255)
  gastos_club    gastos_club[]
}

model tipo_reserva {
  id_tipo_reserva   BigInt     @id(map: "tipo_reserva_pk") @default(autoincrement())
  desc_tipo_reserva String     @db.VarChar(255)
  reservas          reservas[]
}

model tipo_socio {
  id_tipo_socio         BigInt    @id(map: "tipo_socio_pk") @default(autoincrement())
  desc_tipo_socio       String    @db.VarChar
  estado_tipo_socio     Int?      @db.SmallInt
  tipo_socio_creado_en  DateTime  @db.Date
  tipo_socio_editado_en DateTime? @db.Date
  socio                 socio[]
}

model usuario {
  id_usuario       BigInt    @id(map: "usuario_pk") @default(autoincrement())
  id_socio         BigInt
  id_acceso        BigInt
  usuariocreadoen  DateTime? @db.Date
  usuarioeditadoen DateTime? @db.Date
  tipo_usuario     String    @db.VarChar(255)
  nombre_usuario   String    @db.VarChar(255)
  contrasea        String    @db.VarChar(255)
  estado_usuario   Int?      @db.SmallInt
}

model profesores {
  id_profesor        Int                  @id(map: "profesores_pk") @default(autoincrement())
  creadoen           DateTime             @db.Date
  editadoen          DateTime?            @db.Date
  estado_profesor    String?              @db.VarChar
  nombre_profesor    String               @db.VarChar(50)
  costo_x_hora       Int?
  contacto_profesor  String?              @db.VarChar
  cedula             String               @db.VarChar(30)
  profesor_borrado   Boolean?
  agendamiento_clase agendamiento_clase[]
}

model inscripciones_no_socios {
  id_inscripcion_no_socio       Int                @id(map: "inscripciones_no_socios_pk") @default(autoincrement())
  id_evento_calendario_no_socio BigInt
  nombre_jugador                String             @db.VarChar(255)
  club_jugador                  String?            @db.VarChar(255)
  desc_inscripcion              String?            @db.VarChar(255)
  fecha_inscripcion             DateTime           @db.Date
  abonado                       Boolean
  estado_inscripcion            Int?               @db.SmallInt
  editadoen                     DateTime?          @db.Date
  calendario_eventos            calendario_eventos @relation(fields: [id_evento_calendario_no_socio], references: [id_evento_calendario], onDelete: NoAction, onUpdate: NoAction, map: "calendario_eventos_inscripciones_no_socios_fk")
}

model acciones {
  id_accion               Int                       @id(map: "id_accion") @default(autoincrement())
  id_modulo_accion        Int
  descripcion_accion      String                    @db.VarChar(255)
  modulos                 modulos                   @relation(fields: [id_modulo_accion], references: [id_modulo], onDelete: NoAction, onUpdate: NoAction, map: "modulos_acciones_fk")
  modulos_habilitados_rol modulos_habilitados_rol[]
}

model modulos {
  id_modulo               Int                       @id(map: "id_modulo") @default(autoincrement())
  descripcion_modulo      String                    @db.VarChar(255)
  acciones                acciones[]
  modulos_habilitados_rol modulos_habilitados_rol[]
}

model modulos_habilitados_rol {
  id_modulo_habilitado               Int      @id(map: "modulos_habilitados_rol_pk") @default(autoincrement())
  id_modulo                          Int
  id_rol_usuario_habilitado_acciones BigInt
  id_accion                          Int
  acciones                           acciones @relation(fields: [id_accion], references: [id_accion], onDelete: NoAction, onUpdate: NoAction, map: "acciones_modulos_habilitados_rol_fk")
  modulos                            modulos  @relation(fields: [id_modulo], references: [id_modulo], onDelete: NoAction, onUpdate: NoAction, map: "modulos_modulos_habilitados_rol_fk")
}

model api_logs {
  id_log          Int      @id(map: "api_logs_pk") @default(autoincrement())
  status_code     Int
  request_body    String?  @db.VarChar(255)
  response_body   String?  @db.VarChar(255)
  type_request    String?  @db.VarChar(10)
  fecha_solicitud DateTime @default(dbgenerated("CURRENT_DATE")) @db.Date
  ruta_solicitud  String   @db.VarChar(255)
}

model rutas_app {
  id_ruta_app           Int                     @id(map: "rutas_app_pk") @default(autoincrement())
  path_ruta             String                  @db.VarChar(255)
  id_tipo_ruta_app      Int
  tipos_ruta_app        tipos_ruta_app          @relation(fields: [id_tipo_ruta_app], references: [id_tipo_ruta_app], onDelete: NoAction, onUpdate: NoAction, map: "tipos_ruta_app_rutas_app_fk")
  rutas_habilitadas_rol rutas_habilitadas_rol[]
}

model rutas_habilitadas_rol {
  id_ruta_habilitada  Int           @id(map: "rutas_habilitadas_rol_pk") @default(autoincrement())
  id_rol_usuario      BigInt
  id_ruta_app         Int
  id_usuario_crea_rh  Int?
  id_usuario_edita_rh Int?
  fecha_edicion       DateTime?     @db.Date
  fecha_creacion      DateTime?     @db.Date
  roles_usuario       roles_usuario @relation(fields: [id_rol_usuario], references: [id_rol_usuario], onDelete: NoAction, onUpdate: NoAction, map: "roles_usuario_rutas_habilitadas_rol_fk")
  rutas_app           rutas_app     @relation(fields: [id_ruta_app], references: [id_ruta_app], onDelete: NoAction, onUpdate: NoAction, map: "rutas_app_rutas_habilitadas_rol_fk")
}

model tipos_ruta {
  id_tipo_ruta     Int    @id(map: "tipos_ruta_pk")
  descripcion_ruta String @db.VarChar(255)
}

model tipos_ruta_app {
  id_tipo_ruta_app Int         @id(map: "tipos_ruta_app_pk") @default(autoincrement())
  descripcion      String      @db.VarChar(255)
  rutas_app        rutas_app[]
}

model egresos {
  is_operacion_egreso Int          @id(map: "egresos_pk") @default(autoincrement())
  id_socio            BigInt
  id_tipo             Int
  nro_factura         String       @db.VarChar(255)
  cargado_en          DateTime     @db.Date
  editado_en          DateTime?    @db.Date
  descripcion         String       @db.VarChar
  monto               Int
  borrado             Boolean?
  comprobante         String       @db.VarChar
  fecha_pago          DateTime     @db.Date
  socio               socio        @relation(fields: [id_socio], references: [id_socio], onDelete: NoAction, onUpdate: NoAction, map: "socio_egresos_fk")
  tipos_egreso        tipos_egreso @relation(fields: [id_tipo], references: [id_tipo], onDelete: NoAction, onUpdate: NoAction, map: "tipos_egreso_egresos_fk")
}

model ingresos {
  column_d_operacion_ingreso Int           @id(map: "ingresos_pk") @default(autoincrement())
  id_socio                   BigInt
  id_tipo                    Int
  nro_factura                String?       @db.VarChar(255)
  cargado_en                 DateTime      @db.Date
  editado_en                 DateTime?     @db.Date
  descripcion                String?       @db.VarChar
  monto                      Int
  borrado                    Boolean       @default(false)
  socio                      socio         @relation(fields: [id_socio], references: [id_socio], onDelete: NoAction, onUpdate: NoAction, map: "socio_ingresos_fk")
  tipos_ingreso              tipos_ingreso @relation(fields: [id_tipo], references: [id_tipo], onDelete: NoAction, onUpdate: NoAction, map: "tipos_ingreso_ingresos_fk")
}

model refinanciacion {
  id_refinanciacion    Int                    @id(map: "refinanciacion_pk") @default(autoincrement())
  monto_deuda          Int
  cuotas               Int
  monto_deuda_nuevo    Int?
  creacion             DateTime               @db.Date
  editado_en           DateTime               @db.Date
  refinanciacion_socio refinanciacion_socio[]
}

model refinanciacion_socio {
  id_refinanciacion_socio Int            @id(map: "refinanciacion_socio_pk") @default(autoincrement())
  id_refinanciacion       Int
  id_socio                BigInt
  nro_cuota               Int
  monto                   Int
  refinanciacion          refinanciacion @relation(fields: [id_refinanciacion], references: [id_refinanciacion], onDelete: NoAction, onUpdate: NoAction, map: "refinanciacion_refinanciacion_socio_fk")
  socio                   socio          @relation(fields: [id_socio], references: [id_socio], onDelete: NoAction, onUpdate: NoAction, map: "socio_refinanciacion_socio_fk")
}

model tipos_egreso {
  id_tipo     Int       @id(map: "tipos_egreso_pk") @default(autoincrement())
  descripcion String    @db.VarChar
  egresos     egresos[]
}

model tipos_ingreso {
  id_tipo     Int        @id(map: "tipos_ingreso_pk") @default(autoincrement())
  descripcion String     @db.VarChar
  ingresos    ingresos[]
}
